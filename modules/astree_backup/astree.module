<?php

function astree_get_recommend_related_list($from_id){
	$query = db_select('node', 'n')
	->fields('n', array('nid', 'title', 'created'))
	->condition('status', 1) //Published.
	->orderBy('created', 'DESC') //Most recent first.
	->execute();
	return $query;
}

function astree_get_recommend_child_list($parent_id){
	return astree_get_recommend_related_list($parent_id); // TODO specify child recommend ranking
}

function astree_node_view_alter(&$build){
	if ($build['#view_mode'] == 'full'){
		drupal_add_library("system", "ui.tabs");
		drupal_add_library("system", "ui.dialog");
		drupal_add_css(drupal_get_path('module', 'astree')."/astree.css");

 		$children_result = db_query("SELECT child_id FROM {children} WHERE parent_id = :parent_id",
 				array(':parent_id' => $build['#node']->nid));
 		$related_result = db_query("SELECT to_id FROM {related} WHERE from_id = :from_id",
 				array(':from_id' => $build['#node']->nid));
 		
 		$node = $build['#node'];
 		
 		$children = array('#parent_id' => $node->nid);
 		while ($child = $children_result->fetchObject()){
 			$child_node = node_load($child->child_id);
 			$children[] = node_view($child_node, 'teaser');
 		}
 		
 		// This line is necessary... see a comment in http://api.drupal.org/api/drupal/includes%21form.inc/function/drupal_get_form/7
 		// However, preview seems still not work
 		form_load_include($form_state, 'inc', 'node', 'node.pages');
 		
 		global $user;
 		
 		$new_node = (object) array(
 				'uid' => $user->uid,
 				'name' => (isset($user->name) ? $user->name : ''),
 		//		'type' => $node->type,
 				'type' => 'answer_sql',
 				'language' => LANGUAGE_NONE,
 		); 		
 		$child_form = drupal_get_form($node->type . '_node_form', $new_node); // TODO Change to the child type we need according to parent type
 		$child_form['parent_id'] = array(
 				'#name' => 'parent_id', // This name is required!
 				'#type' => 'hidden',
 				'#value' => $node->nid,
 		);
 		$children['new_child_form'] = $child_form;
 		
 		$list = astree_get_recommend_child_list($node->nid);
 		$items = array();
		global $item;
		$item=array($node->nid=>1);
 		foreach ($list as $child){
 			$items[] = array(
 					'title' => l($child->title, 'node/'.$child->nid),
 					'action' => l(t('Add this as child'), "add_child/{$node->nid}/{$child->nid}")
 			);
 		}
 		$children['recommend_child_list'] = $items;
 			
 		// ---------------Related----------------
 		$related = array("#from_id" => $node->nid);
 		while ($record = $related_result->fetchObject()){
 			$related_node = node_load($record->to_id);
 			$related[] = node_view($related_node, 'teaser');
 		}
 		
 		$new_node = (object) array(
 				'uid' => $user->uid,
 				'name' => (isset($user->name) ? $user->name : ''),
 				'type' => $node->type,
 				'language' => LANGUAGE_NONE,
 		); 
 		$related_form = drupal_get_form($node->type . '_node_form', $new_node);
 		$related_form['from_id'] = array(
 				'#type' => 'hidden',
 				'#value' => $node->nid,
 				'#name' => 'from_id',
 		);
   		$related['new_related_form'] = $related_form;
   		
   		$list = astree_get_recommend_related_list($node->nid);
   		$items = array();
   		foreach ($list as $related_node){
   			$items[] = array(
   					'title' => l($related_node->title, 'node/'.$related_node->nid),
   					'action' => l(t('Add this as related'), "add_related/{$node->nid}/{$related_node->nid}") 
   					);
   		}
   		$related['recommend_related_list'] = $items;
 			
		// We have to substitue comments field, rather than add some
		// new field, because the outter theme (node.tpl.php) did a specific
		// work to put comments field to the bottom
		$build['comments'] = array(
				'#markup' => theme('astree_tabs',
						array(
								'comments' => $build['comments'],
								'children' => $children,
								'related' => $related
						)
				),
		);
// 		unset($build['comments']);
// 		print_r($build);
	}
}

function astree_theme(){
	return array(
			'astree_tabs' => array(
					'template' => 'astree_tabs',
					'variables' => array('children' => NULL, 'related' => NULL, 'comments' => NULL),
			),
	);
}

function astree_menu(){
	$items['add_child'] = array(
			'title' => 'add child',
			'page callback' => 'astree_add_child',
			
			// TODO This line is necessary. We should define better access check
			'access arguments' => array('access content'), 
	);
	$items['add_related'] = array(
			'title' => 'add related',
			'page callback' => 'astree_add_related',
			'access arguments' => array('access content'), // TODO better access check
	);
	$items['remove_child'] = array(
			'title' => 'remove child',
			'page callback' => 'astree_remove_child',
			'access arguments' => array('access content'), // TODO better access check
	);
		$items['remove_related'] = array(
			'title' => 'remove related',
			'page callback' => 'astree_remove_related',
			'access arguments' => array('access content'), // TODO better access check
	);
	return $items;
}

function astree_parse_nid($post){
	if ($post){
		preg_match('/node\/(\d+)/', $post, $matches);
		if ($matches[1])
			return $matches[1];
		preg_match('/\d+/', $post, $matches);
		if ($matches[0])
			return $matches[0];
	}
	return null;
}

function _add_child($parent_id, $child_id){
	$result = db_query("INSERT INTO {children}(parent_id, child_id) VALUES(:parent_id, :child_id)",
			array(':parent_id' => $parent_id, ':child_id' => $child_id));
	return $result;	
}

function astree_add_child($parent_id, $child_id){
	$post = $_POST['child_link_or_nid'];
	if ($child_id == null)
		$child_id = astree_parse_nid($post);
// 	echo 'add parent_id, child_id = '.$parent_id.', '.$child_id;
	$result = _add_child($parent_id, $child_id);
	drupal_set_message($result->rowCount().' child has been successfully added.');
	drupal_goto('node/'.$parent_id);
}

function astree_remove_child($parent_id, $child_id){
	$post = $_POST['child_link_or_nid'];
	if ($child_id == null)
		$child_id = astree_parse_nid($post);
// 	echo 'remove parent_id, child_id = '.$parent_id.', '.$child_id;
	$result = db_query("DELETE FROM {children} WHERE parent_id = :parent_id AND child_id = :child_id",
			array(':parent_id' => $parent_id, ':child_id' => $child_id));
	drupal_set_message($result->rowCount().' child has been successfully removed.');
	drupal_goto('node/'.$parent_id);
}

function _add_related($from_id, $to_id){
	$result = db_query("INSERT INTO {related}(from_id, to_id) VALUES(:from_id, :to_id)",
			array(':from_id' => $from_id, ':to_id' => $to_id));
	return $result;
}

function astree_add_related($from_id, $to_id){
	$post = $_POST['related_link_or_nid'];
	if ($to_id == null)
		$to_id = astree_parse_nid($post);
// 	echo 'add from_id, to_id = '.$from_id.', '.$to_id;
	$result = _add_related($from_id, $to_id);
	drupal_set_message($result->rowCount().' related node has been successfully added.');
	drupal_goto('node/'.$from_id);
}

function astree_remove_related($from_id, $to_id){
	$post = $_POST['related_link_or_nid'];
	if ($to_id == null)
		$to_id = astree_parse_nid($post);
// 	echo 'remove from_id, to_id = '.$from_id.', '.$to_id;
	$result = db_query("DELETE FROM {related} WHERE from_id = :from_id AND to_id = :to_id",
			array(':from_id' => $from_id, ':to_id' => $to_id));
	drupal_set_message($result->rowCount().' related node has been successfully removed.');
	drupal_goto('node/'.$from_id);
}

function astree_node_submit($node, $form, $form_state){
 	$node->parent_id = $form_state['input']['parent_id'];
 	$node->from_id = $form_state['input']['from_id'];
}

function astree_node_insert($node){
	if ($node->parent_id){
		_add_child($node->parent_id, $node->nid);
	}
	if ($node->from_id){
		_add_related($node->from_id, $node->nid);
	}
}

function astree_node_delete($node){
	db_query("DELETE FROM {related} WHERE from_id = :id OR to_id = :id", array(':id' => $node->nid));
	db_query("DELETE FROM {children} WHERE parent_id = :id OR child_id = :id", array(':id' => $node->nid));
}
